#!/usr/bin/env bash

function conditional_download() {
  local DOWNLOAD_URL="$1"
  local DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "Downloading ${DOWNLOAD_URL}"
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

function export_env_dir() {
  local env_dir=$1
  local whitelist_regex=${2:-'(DEPENDENCY_S3_BUCKET_PATH|MONO_VERSION|LIBUV_VERSION|NODE_VERSION|PROJECT|BUILD_DEBUG|CORE_VERSION|CORE_CHANNEL|CORE_DOWNLOAD_LOCATION|DEFAULT_CONNECTION|DefaultConnection|DATABASE_URL|JAWSDB_MARIA_URL|JAWSDB_URL|CLEARDB_DATABASE_URL)$'}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

# based on ddollar/heroku-buildpack-apt which is deprecated
function apt_install(){
  echo "Install package"

  local apt_cache_dir="$CACHE_DIR/apt/cache"
  local apt_state_dir="$CACHE_DIR/apt/state"
  
  mkdir -p "$apt_cache_dir/archives/partial"
  mkdir -p "$apt_state_dir/lists/partial"
  
  local apt_options="-o debug::nolocking=true -o dir::cache=$apt_cache_dir -o dir::state=$apt_state_dir"
  
  topic "Cleaning apt caches"
  apt-get $apt_options clean | indent
  
  topic "Updating apt caches"
  apt-get  --allow-unauthenticated $apt_options update | indent

  for package in "$@"; do
    if [[ $package == *deb ]]; then
      local package_name=$(basename $package .deb)
      local package_file=$apt_cache_dir/archives/$package_name.deb
      topic "Fetching $package"
      curl -s -L -z $package_file -o $package_file $package 2>&1 | indent
    else
      topic "Fetching .debs for $package"
      apt-get $apt_options -y --force-yes -d install --reinstall $package | indent
    fi
  done
  
  mkdir -p "$BUILD_DIR/.apt"

  for DEB in $(ls -1 $apt_cache_dir/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB "$BUILD_DIR/.apt/"
  done
  
  export PATH="$PATH:$BUILD_DIR/.apt/usr/bin"
  export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
  export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
  export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
  export CPATH="$INCLUDE_PATH"
  export CPPPATH="$INCLUDE_PATH"
  export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
  echo "APT packages Installled"
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}
