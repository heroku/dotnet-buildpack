#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}

: ${MONO_VERSION:="4.0.1.44"}
: ${MONO_DOWNLOAD_LOCATION:="https://github.com/friism/mono-builder/releases/download/v${MONO_VERSION}/mono-${MONO_VERSION}.tar.gz"}
: ${LIBUV_VERSION:="1.6.0"}
: ${NODE_VERSION:="0.12.2"}
: ${DNVM_BRANCH:="dev"}
: ${DNX_VERSION:="latest"}

if [ -n "$BUILD_DEBUG" ]; then
	DNU_FLAGS=""
	echo "DNX_VERSION: ${DNX_VERSION}"
	echo "DNVM_BRANCH: ${DNVM_BRANCH}"
else
	DNU_FLAGS="--quiet"
fi

SRC_DIR=`mktemp -d`
# Move the app source code into temporary src dir using subshell to not leak shopt
(
	shopt -s dotglob
	mv ${BUILD_DIR}/* ${SRC_DIR}
)

mkdir -p ${CACHE_DIR}

echo "installing ${MONO_DOWNLOAD_LOCATION}"
curl ${MONO_DOWNLOAD_LOCATION} -Ls | tar xz -C ${BUILD_DIR}
# Mono expects to be running out of /app
ln -s ${BUILD_DIR}/mono /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

mozroots --import --sync --quiet
cp -r ~/.config ${BUILD_DIR}/.

# TODO: This test doesn't seen to actually work
if [[ -n $(find . -type f -iname package.json -o -iname bower.json -o -iname gruntfile.js -o -iname gulpfile.js ) ]]
then
	# Install Node and grunt-cli
	NODE_PATH=`mktemp -d`
	curl https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz -Ls \
		| tar xz -C ${NODE_PATH}
	export PATH="${NODE_PATH}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
	if ! hash grunt 2>/dev/null; then
		npm install -g grunt-cli
	fi
	if ! hash bower 2>/dev/null; then
		npm install -g bower
	fi
	if ! hash gulp 2>/dev/null; then
		npm install -g gulp
	fi
fi

# Install DNX
# TODO: consider making this not dependent on GitHub being up
touch ~/.profile
curl -sSL https://raw.githubusercontent.com/aspnet/Home/${DNVM_BRANCH}/dnvminstall.sh \
	| sh && source ~/.dnx/dnvm/dnvm.sh

export DNVM_RUNTIME_LOCAL_CACHE="/app/.dnx"
export DNVM_RUNTIME_CACHE_LOCATION="${CACHE_DIR}/dnx/runtimes"
mkdir -p ${DNVM_RUNTIME_LOCAL_CACHE}
mkdir -p ${DNVM_RUNTIME_CACHE_LOCATION}
ln -s ${DNVM_RUNTIME_CACHE_LOCATION} ${DNVM_RUNTIME_LOCAL_CACHE}/runtimes

# TODO: extract DNX version from global.json
dnvm install $DNX_VERSION -u -a default

# Add DNX to the build output
DNX_BUILD_LOCATION=${BUILD_DIR}/.dnx/runtimes/
mkdir -p ${DNX_BUILD_LOCATION}
cp -r ~/.dnx/runtimes/`dnvm alias default` ${DNX_BUILD_LOCATION}

DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/.deployment
if [ -n "$PROJECT" ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/${PROJECT}
	echo "Project file configured in PROJECT environment variable"
elif [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
	echo "Project file configured in .deployment file"
else
	PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
	printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
	PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "Building ${PROJECT_JSON_FILE}"

export DNU_LOCAL_CACHE="/app/.local/share/dnu"
export DNU_CACHE_LOCATION="${CACHE_DIR}/dnu/cache"
mkdir -p ${DNU_LOCAL_CACHE}
mkdir -p ${DNU_CACHE_LOCATION}
ln -s ${DNU_CACHE_LOCATION} ${DNU_LOCAL_CACHE}/cache 

dnu restore $DNU_FLAGS ${PROJECT_JSON_FILE}

dnu publish --out ${BUILD_DIR} $DNU_FLAGS --no-source --configuration Release ${PROJECT_JSON_FILE}

# Clean out core-stuff that we don't need in the slug
find ${BUILD_DIR} -iname dnxcore50 -print0 | xargs -r -0 rm --

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

curl https://github.com/friism/libuv-builder/releases/download/v${LIBUV_VERSION}/libuv-${LIBUV_VERSION}.tar.gz -sL \
	 | tar xz -C ${BUILD_DIR}
if [ -e ${SRC_DIR}/Procfile ]; then
	cp ${SRC_DIR}/Procfile ${BUILD_DIR}
else
	ROOTS=`cd ${BUILD_DIR}; find approot/packages/ -name root`
	if [ $( echo "${ROOTS}" | wc -l ) -gt 0 ]; then
	APP_ROOT=$(echo "$ROOTS" | head -1)
	cat << EOT >> ${BUILD_DIR}/Procfile
web: dnx --appbase $APP_ROOT Microsoft.Framework.ApplicationHost kestrel --configuration Release --server.urls http://+:\$PORT
EOT
	fi
fi
